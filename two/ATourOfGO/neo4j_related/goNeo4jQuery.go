// refer to website
// https://stackoverflow.com/questions/38673673/access-http-response-as-string-in-go
// https://gobyexample.com/json

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"reflect"
	"strings"
)

// declare to parse json format while use NewRequest
type Payload struct {
	Query string `json:"query"`
}

type AutoGenerated struct {
	Columns []string   `json:"columns"`
	Data    [][]string `json:"data"`
}

func neo4jQueryNodes(command string) string {
	var queryString string
	switch cmd := command; cmd {
	case "link":
		queryString = "MATCH p=(n1)-[r]->(n2) return n1.domainId, type(r), n2.domainId"
	case "query":
		queryString = "match(n) return n.domainId"
	default:
		return "need to put query string"
	}

	data := Payload{
		Query: queryString,
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "http://172.31.86.190:7474/db/data/cypher", body)
	if err != nil {
		// handle err
	}
	req.SetBasicAuth("neo4j", "na")
	req.Header.Set("Accept", "application/json")
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	jsonRsponse := AutoGenerated{}
	bodyBytes, _ := ioutil.ReadAll(resp.Body)
	json.Unmarshal(bodyBytes, &jsonRsponse)
	fmt.Println()
	var returnString = ""
	if len(jsonRsponse.Data) >= 1 {
		for i := range jsonRsponse.Data {
			switch command {
			case "link":
				returnString = returnString + " " + jsonRsponse.Data[i][0] + "+" + jsonRsponse.Data[i][1] + "+" + jsonRsponse.Data[i][2]
			case "query":
				returnString = returnString + " " + jsonRsponse.Data[i][0]
			}
		}
	} else {
		fmt.Println("length is 0")
	}

	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	return returnString
}

func main() {
	var test = neo4jQueryNodes("link")
	fmt.Println(reflect.TypeOf(test))
	fmt.Println(test)
	// fmt.Println(test=="testDomainID+belong+testDomainID2")
	fmt.Println(strings.Contains(test, "testDomainID+belong+testDomainID2"))
	fmt.Println(strings.Contains(test, "testDomainID"))
}
