package controllers

import (
	"encoding/json"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/jimweng/memoServer/model"
)

func ReturnPageInfo(ctx *gin.Context) {
	page, _ := strconv.Atoi(ctx.DefaultQuery("offset", "1"))
	limit, _ := strconv.Atoi(ctx.DefaultQuery("limit", "3"))
	index := ctx.DefaultQuery("sort", "id")
	order := ctx.DefaultQuery("order", "asc")

	paginator := model.GetData(page, limit, index, order)

	ctx.JSON(200, paginator)
	return
}

/* need to add log formater for better logger */
func PostData(ctx *gin.Context) {
	if reqBody, err := ctx.GetRawData(); err == nil {
		postStructure := model.MemoList{}
		json.Unmarshal(reqBody, &postStructure)
		err = model.InsertData(postStructure.Title, postStructure.Description, postStructure.Category)

		statusCode, msg := returnMsg(err)
		ctx.JSON(statusCode+1, gin.H{
			"status": msg,
		})
	}
	return
}

/* need to add log formater for better logger */
func DeleteSpecificValue(ctx *gin.Context) {
	if reqBody, err := ctx.GetRawData(); err == nil {
		postStructure := AutoGenerated{}
		json.Unmarshal(reqBody, &postStructure)

		for _, j := range postStructure.Data {
			if err = model.DeleteData(j.ID); err != nil {
				break
			}
		}
		statusCode, msg := returnMsg(err)
		ctx.JSON(statusCode, gin.H{
			"status": msg,
		})
	}
	return
}

/* need to add log formater for better logger */
func UpdateData(ctx *gin.Context) {
	if reqBody, err := ctx.GetRawData(); err == nil {
		postStructure := AutoGenerated{}
		json.Unmarshal(reqBody, &postStructure)

		for _, j := range postStructure.Data {
			if err = model.UpdateData(j.ID, j.Title, j.Description, j.Category); err != nil {
				break
			}
		}
		statusCode, msg := returnMsg(err)
		ctx.JSON(statusCode, gin.H{
			"status": msg,
		})
	}

	return
}

type AutoGenerated struct {
	Data []struct {
		DataBody
	} `json:"data"`
}

type DataBody struct {
	ID          int    `json:"ID"`
	Title       string `json:"Title"`
	Description string `json:"Description"`
	Category    int    `json:"Category"`
}

func returnMsg(err error) (int, string) {
	if err == nil {
		return 200, "ok"
	} else {
		return 400, "operation failed"
	}
}
