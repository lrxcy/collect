package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/gin-gonic/gin"
)

var autojsfiles []AutoGenerated

// convert json from: https://mholt.github.io/json-to-go/
type AutoGenerated struct {
	Plugin string `json:"plugin"`
}

func getDirJsonFiles(dirpath string) *[]string {
	filelist := []string{}
	files, err := ioutil.ReadDir(dirpath)
	if err != nil {
		panic(err)
	}

	for _, f := range files {
		if strings.Contains(f.Name(), ".json") {
			filelist = append(filelist, fmt.Sprintf("%s", dirpath+"/"+f.Name()))
		}
	}
	return &filelist
}

func main() {
	autojsfiles = make([]AutoGenerated, 0)

	loadConfig("./jsonfolder")

	router := setupRouter()
	router.Run()
}

func loadConfig(fpath string) {
	fsptr := getDirJsonFiles(fpath)
	for _, i := range *fsptr {
		fmt.Println(i)
		parseJsonToStruct(i)
	}
}

func parseJsonToStruct(jspath string) error {
	var autog AutoGenerated
	tmpbytes, err := ioutil.ReadFile(jspath)
	if err != nil {
		return err
	}
	if err := json.Unmarshal(tmpbytes, &autog); err != nil {
		return err
	} else {
		autojsfiles = append(autojsfiles, autog)
	}

	return nil
}

func setupRouter() *gin.Engine {
	router := gin.Default()
	router.GET("/list", showJsonStruct)
	router.GET("/update", reloadGatherJson)

	return router
}

func showJsonStruct(c *gin.Context) {
	for i, j := range autojsfiles {
		fmt.Println(i, j)
	}
	c.JSON(200, gin.H{
		"message": "test list",
	})
}

func reloadGatherJson(c *gin.Context) {
	autojsfiles = make([]AutoGenerated, 0)

	loadConfig("./jsonfolder")

	c.JSON(200, gin.H{
		"message": "test list",
	})
}
