package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/gin-gonic/gin"
)

func gracefulShutdown() {

	// create one chan to print awaiting signal on console
	sigs := make(chan os.Signal, 1)
	// create another chan to receive signal to interrupt original chan
	done := make(chan bool, 1)

	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		sig := <-sigs
		fmt.Println()
		fmt.Println(sig)
		done <- true
	}()

	fmt.Println("awaiting signal")
	<-done
	fmt.Println("exiting")
}

func main() {
	router := gin.Default()
	apiRouter(router)
	httpSrv := &http.Server{
		Addr:    ":" + "8000",
		Handler: router,
	}

	go func() {
		if err := httpSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Printf("http listen: %v\n", err)
		}
	}()
	gracefulShutdown()

}

func apiRouter(router *gin.Engine) {
	authorized := router.Group("/")

	ver1 := authorized.Group("/echo/api")
	{
		ver1.POST("/echo_something", test)
	}
}

func test(c *gin.Context) {
	buf := make([]byte, 4096)
	num, _ := c.Request.Body.Read(buf)
	returnStruct := &AutoGenerated{}
	json.Unmarshal(buf[:num], returnStruct)
	returnStruct.OptCode = "dev"

	c.JSON(http.StatusOK, returnStruct)
}

type AutoGenerated struct {
	Meta     map[string]interface{} `json:"meta"`
	Content  interface{}            `json:"content"`
	Sign     string                 `json:"sign"`
	OptCode  string                 `json:"optCode"`
	Code     string                 `json:"code"`
	IssueNo  string                 `json:"issueNo"`
	PrizeNum string                 `json:"prizeNum"`
}

// https://github.com/gin-gonic/gin/issues/1295
// use c.GetRawData() only apply wiht request Content-Type: application/json
// declare a buf := make([]byte, 1024) and use c.Request.Body.Read(buf) to retrive raw []byte, then convet it to string

// https://stackoverflow.com/questions/48010954/json-response-in-golang-s-gin-returning-as-scrambled-data
// 可以使用gin內建的g.H來做回傳，也可以另外宣告一個資料結構。直接回傳資料結構即可!
// c.JSON(http.StatusOK, returnStruct)
// ====等價於===
// c.JSON(http.StatusOK, gin.H{
// 	"optCode":  "dev",
// 	"code":     returnStruct.Code,
// 	"issueNo":  returnStruct.IssueNo,
// 	"prizeNum": returnStruct.PrizeNum,
// })
